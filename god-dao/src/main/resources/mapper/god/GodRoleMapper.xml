<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">

<mapper namespace="com.god.dao.zeus.GodRoleDao">

	<resultMap id="BaseResultMap" type="com.god.model.zeus.entity.GodRole">
        <id property="id" jdbcType="BIGINT" column="id"/>
        <result property="name" jdbcType="VARCHAR" column="name"/>
        <result property="description" jdbcType="VARCHAR" column="description"/>
        <result property="status" jdbcType="INTEGER" column="status"/>
        <result property="createTime" jdbcType="TIMESTAMP" column="create_time"/>
        <result property="updateTime" jdbcType="TIMESTAMP" column="update_time"/>
	</resultMap>
	
	<sql id="Base_Column_List">
		id,
		name,
		description,
		status,
		create_time,
		update_time
	</sql>
	
	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="insert" parameterType="com.god.model.zeus.entity.GodRole" >
	    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
			SELECT LAST_INSERT_ID()
	   	</selectKey>
        INSERT INTO god_role (
        	name,
        	description,
        	status,
        	create_time,
        	update_time
        ) VALUES (
        	#{name,jdbcType=VARCHAR},
        	#{description,jdbcType=VARCHAR},
        	#{status,jdbcType=INTEGER},
        	#{createTime,jdbcType=TIMESTAMP},
        	#{updateTime,jdbcType=TIMESTAMP}
        )
	</insert>
	
	<insert id="insertSelective" parameterType="com.god.model.zeus.entity.GodRole" >
	   	<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
			SELECT LAST_INSERT_ID()
		</selectKey>
	   	INSERT INTO god_role 
	   	<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="name != null">
		    	name,
			</if>
			<if test="description != null">
		    	description,
			</if>
			<if test="status != null">
		    	status,
			</if>
			<if test="createTime != null">
		    	create_time,
			</if>
			<if test="updateTime != null">
		    	update_time,
			</if>
        </trim>  
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
       		<if test="name != null">
	       		#{name,jdbcType=VARCHAR},
	       	</if>
       		<if test="description != null">
	       		#{description,jdbcType=VARCHAR},
	       	</if>
       		<if test="status != null">
	       		#{status,jdbcType=INTEGER},
	       	</if>
       		<if test="createTime != null">
	       		#{createTime,jdbcType=TIMESTAMP},
	       	</if>
       		<if test="updateTime != null">
	       		#{updateTime,jdbcType=TIMESTAMP},
	       	</if>
		</trim>
	</insert>
    
	<update id="updateByPrimaryKey" >
        UPDATE god_role SET
	        name = #{name,jdbcType=VARCHAR},
	        description = #{description,jdbcType=VARCHAR},
	        status = #{status,jdbcType=INTEGER},
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	        update_time = #{updateTime,jdbcType=TIMESTAMP}
        WHERE 
	        id = #{id,jdbcType=BIGINT}
	</update>
	
	<update id="updateByPrimaryKeySelective" >
        UPDATE god_role SET
	        <if test="name != null">
	        	name = #{name,jdbcType=VARCHAR},
	        </if>
	        <if test="description != null">
	        	description = #{description,jdbcType=VARCHAR},
	        </if>
	        <if test="status != null">
	        	status = #{status,jdbcType=INTEGER},
	        </if>
	        <if test="createTime != null">
	        	create_time = #{createTime,jdbcType=TIMESTAMP},
	        </if>
	        <if test="updateTime != null">
	        	update_time = #{updateTime,jdbcType=TIMESTAMP}
	        </if>
        WHERE 
	        id = #{id,jdbcType=BIGINT}
	</update>

    <delete id="deleteByPrimaryKey">
        DELETE FROM god_role WHERE
        id = #{id,jdbcType=BIGINT}
    </delete>
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap">
		SELECT <include refid="Base_Column_List" />
	    FROM god_role
        WHERE 
	        id = #{id,jdbcType=BIGINT}
	</select>
	
	<sql id="Example_Where_Clause">
	  <where>
	    <foreach collection="oredCriteria" item="criteria" separator="or">
	      <if test="criteria.valid">
	        <trim prefix="(" prefixOverrides="and" suffix=")">
	          <foreach collection="criteria.criteria" item="criterion">
	            <choose>
	            	<when test="criterion.noValue">
						and ${criterion.condition}
					</when>
					<when test="criterion.singleValue">
						and ${criterion.condition} #{criterion.value}
					</when>
					<when test="criterion.betweenValue">
						and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
					</when>
					<when test="criterion.listValue">
						and ${criterion.condition}
						<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">#{listItem}</foreach>
					</when>
	            </choose>
	          </foreach>
	        </trim>
	      </if>
	    </foreach>
	  </where>
	</sql>	

	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">#{listItem}</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	<update id="updateByExample" parameterType="map">
		UPDATE god_role SET
	        id = #{id,jdbcType=BIGINT},
	        name = #{name,jdbcType=VARCHAR},
	        description = #{description,jdbcType=VARCHAR},
	        status = #{status,jdbcType=INTEGER},
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	        update_time = #{updateTime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	
	<update id="updateByExampleSelective" parameterType="map">
		UPDATE god_role SET
	        <if test="id != null">
	        	id = #{id,jdbcType=BIGINT},
	        </if>
	        <if test="name != null">
	        	name = #{name,jdbcType=VARCHAR},
	        </if>
	        <if test="description != null">
	        	description = #{description,jdbcType=VARCHAR},
	        </if>
	        <if test="status != null">
	        	status = #{status,jdbcType=INTEGER},
	        </if>
	        <if test="createTime != null">
	        	create_time = #{createTime,jdbcType=TIMESTAMP},
	        </if>
	        <if test="updateTime != null">
	        	update_time = #{updateTime,jdbcType=TIMESTAMP}
	        </if>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	
	<delete id="deleteByExample" parameterType="com.god.model.zeus.query.GodRoleExample">
		DELETE FROM god_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	
	<select id="countByExample" parameterType="com.god.model.zeus.query.GodRoleExample" resultType="java.lang.Long">
		SELECT count(*) FROM god_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	
	<select id="selectByExample" parameterType="com.god.model.zeus.query.GodRoleExample" resultMap="BaseResultMap">
		SELECT
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		FROM god_role
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			ORDER BY ${orderByClause}
		</if>
		<if test="start gt -1 and end lt 10000">
            LIMIT #{start}, #{end}
        </if>
	</select>
	
</mapper>

